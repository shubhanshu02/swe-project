package swe;

import swe.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Tue Mar 29 22:00:16 IST 2022 by shubh
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Assignment
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Assignment", Assignment.class, DefaultAssignment.class);
    }

    /**
     * Creates an instance of type Assignment.  Modifies the underlying ontology.
     */
    public Assignment createAssignment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASSIGNMENT, DefaultAssignment.class);
    }

    /**
     * Gets an instance of type Assignment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Assignment getAssignment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASSIGNMENT, DefaultAssignment.class);
    }

    /**
     * Gets all instances of Assignment from the ontology.
     */
    public Collection<? extends Assignment> getAllAssignmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASSIGNMENT, DefaultAssignment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Class_Post
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Class_Post", Class_Post.class, DefaultClass_Post.class);
    }

    /**
     * Creates an instance of type Class_Post.  Modifies the underlying ontology.
     */
    public Class_Post createClass_Post(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLASS_POST, DefaultClass_Post.class);
    }

    /**
     * Gets an instance of type Class_Post with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Class_Post getClass_Post(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLASS_POST, DefaultClass_Post.class);
    }

    /**
     * Gets all instances of Class_Post from the ontology.
     */
    public Collection<? extends Class_Post> getAllClass_PostInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLASS_POST, DefaultClass_Post.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Class_Post_Comment
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Class_Post_Comment", Class_Post_Comment.class, DefaultClass_Post_Comment.class);
    }

    /**
     * Creates an instance of type Class_Post_Comment.  Modifies the underlying ontology.
     */
    public Class_Post_Comment createClass_Post_Comment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLASS_POST_COMMENT, DefaultClass_Post_Comment.class);
    }

    /**
     * Gets an instance of type Class_Post_Comment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Class_Post_Comment getClass_Post_Comment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLASS_POST_COMMENT, DefaultClass_Post_Comment.class);
    }

    /**
     * Gets all instances of Class_Post_Comment from the ontology.
     */
    public Collection<? extends Class_Post_Comment> getAllClass_Post_CommentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLASS_POST_COMMENT, DefaultClass_Post_Comment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Comment
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Comment", Comment.class, DefaultComment.class);
    }

    /**
     * Creates an instance of type Comment.  Modifies the underlying ontology.
     */
    public Comment createComment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMENT, DefaultComment.class);
    }

    /**
     * Gets an instance of type Comment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Comment getComment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMENT, DefaultComment.class);
    }

    /**
     * Gets all instances of Comment from the ontology.
     */
    public Collection<? extends Comment> getAllCommentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMENT, DefaultComment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Course
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Course", Course.class, DefaultCourse.class);
    }

    /**
     * Creates an instance of type Course.  Modifies the underlying ontology.
     */
    public Course createCourse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }

    /**
     * Gets an instance of type Course with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Course getCourse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }

    /**
     * Gets all instances of Course from the ontology.
     */
    public Collection<? extends Course> getAllCourseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Department
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Department", Department.class, DefaultDepartment.class);
    }

    /**
     * Creates an instance of type Department.  Modifies the underlying ontology.
     */
    public Department createDepartment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets an instance of type Department with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Department getDepartment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets all instances of Department from the ontology.
     */
    public Collection<? extends Department> getAllDepartmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Person
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Progress_Report
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Progress_Report", Progress_Report.class, DefaultProgress_Report.class);
    }

    /**
     * Creates an instance of type Progress_Report.  Modifies the underlying ontology.
     */
    public Progress_Report createProgress_Report(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROGRESS_REPORT, DefaultProgress_Report.class);
    }

    /**
     * Gets an instance of type Progress_Report with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Progress_Report getProgress_Report(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROGRESS_REPORT, DefaultProgress_Report.class);
    }

    /**
     * Gets all instances of Progress_Report from the ontology.
     */
    public Collection<? extends Progress_Report> getAllProgress_ReportInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROGRESS_REPORT, DefaultProgress_Report.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Progress_Report_Submission
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Progress_Report_Submission", Progress_Report_Submission.class, DefaultProgress_Report_Submission.class);
    }

    /**
     * Creates an instance of type Progress_Report_Submission.  Modifies the underlying ontology.
     */
    public Progress_Report_Submission createProgress_Report_Submission(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROGRESS_REPORT_SUBMISSION, DefaultProgress_Report_Submission.class);
    }

    /**
     * Gets an instance of type Progress_Report_Submission with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Progress_Report_Submission getProgress_Report_Submission(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROGRESS_REPORT_SUBMISSION, DefaultProgress_Report_Submission.class);
    }

    /**
     * Gets all instances of Progress_Report_Submission from the ontology.
     */
    public Collection<? extends Progress_Report_Submission> getAllProgress_Report_SubmissionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROGRESS_REPORT_SUBMISSION, DefaultProgress_Report_Submission.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Report_Comment
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Report_Comment", Report_Comment.class, DefaultReport_Comment.class);
    }

    /**
     * Creates an instance of type Report_Comment.  Modifies the underlying ontology.
     */
    public Report_Comment createReport_Comment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REPORT_COMMENT, DefaultReport_Comment.class);
    }

    /**
     * Gets an instance of type Report_Comment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Report_Comment getReport_Comment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REPORT_COMMENT, DefaultReport_Comment.class);
    }

    /**
     * Gets all instances of Report_Comment from the ontology.
     */
    public Collection<? extends Report_Comment> getAllReport_CommentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REPORT_COMMENT, DefaultReport_Comment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Student
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Student", Student.class, DefaultStudent.class);
    }

    /**
     * Creates an instance of type Student.  Modifies the underlying ontology.
     */
    public Student createStudent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }

    /**
     * Gets an instance of type Student with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Student getStudent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }

    /**
     * Gets all instances of Student from the ontology.
     */
    public Collection<? extends Student> getAllStudentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Student_Group
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Student_Group", Student_Group.class, DefaultStudent_Group.class);
    }

    /**
     * Creates an instance of type Student_Group.  Modifies the underlying ontology.
     */
    public Student_Group createStudent_Group(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STUDENT_GROUP, DefaultStudent_Group.class);
    }

    /**
     * Gets an instance of type Student_Group with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Student_Group getStudent_Group(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STUDENT_GROUP, DefaultStudent_Group.class);
    }

    /**
     * Gets all instances of Student_Group from the ontology.
     */
    public Collection<? extends Student_Group> getAllStudent_GroupInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STUDENT_GROUP, DefaultStudent_Group.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teacher
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teacher", Teacher.class, DefaultTeacher.class);
    }

    /**
     * Creates an instance of type Teacher.  Modifies the underlying ontology.
     */
    public Teacher createTeacher(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEACHER, DefaultTeacher.class);
    }

    /**
     * Gets an instance of type Teacher with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Teacher getTeacher(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEACHER, DefaultTeacher.class);
    }

    /**
     * Gets all instances of Teacher from the ontology.
     */
    public Collection<? extends Teacher> getAllTeacherInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEACHER, DefaultTeacher.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teaching_Assistant
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teaching_Assistant", Teaching_Assistant.class, DefaultTeaching_Assistant.class);
    }

    /**
     * Creates an instance of type Teaching_Assistant.  Modifies the underlying ontology.
     */
    public Teaching_Assistant createTeaching_Assistant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEACHING_ASSISTANT, DefaultTeaching_Assistant.class);
    }

    /**
     * Gets an instance of type Teaching_Assistant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Teaching_Assistant getTeaching_Assistant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEACHING_ASSISTANT, DefaultTeaching_Assistant.class);
    }

    /**
     * Gets all instances of Teaching_Assistant from the ontology.
     */
    public Collection<? extends Teaching_Assistant> getAllTeaching_AssistantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEACHING_ASSISTANT, DefaultTeaching_Assistant.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teaching_Staff
     */

    {
        javaMapping.add("http://www.semanticweb.org/shubh/ontologies/2022/2/untitled-ontology-4#Teaching_Staff", Teaching_Staff.class, DefaultTeaching_Staff.class);
    }

    /**
     * Creates an instance of type Teaching_Staff.  Modifies the underlying ontology.
     */
    public Teaching_Staff createTeaching_Staff(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEACHING_STAFF, DefaultTeaching_Staff.class);
    }

    /**
     * Gets an instance of type Teaching_Staff with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Teaching_Staff getTeaching_Staff(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEACHING_STAFF, DefaultTeaching_Staff.class);
    }

    /**
     * Gets all instances of Teaching_Staff from the ontology.
     */
    public Collection<? extends Teaching_Staff> getAllTeaching_StaffInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEACHING_STAFF, DefaultTeaching_Staff.class);
    }


}
